{
  "name": "owasp-password-strength-test",
  "version": "1.3.0",
  "description": "A password-strength tester based upon the OWASP guidelines for enforcing strong passwords.",
  "main": "owasp-password-strength-test.js",
  "devDependencies": {
    "jshint": "2.6.3",
    "mocha": "2.2.4",
    "should": "3.1.2"
  },
  "jshintConfig": {
    "expr": true,
    "laxbreak": true
  },
  "scripts": {
    "test": "mocha --recursive --reporter spec test.js",
    "lint": "jshint *.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/nowsecure/owasp-password-strength-test.git"
  },
  "keywords": [
    "security",
    "password",
    "owasp"
  ],
  "author": {
    "name": "Chris Allen Lane"
  },
  "license": "MIT",
  "readme": "OWASP Password Strength Test\n============================\n`owasp-password-strength-test` is a password-strength tester based off of the\n[OWASP Guidelines for enforcing secure passwords][guidelines]. It is\nlightweight, extensible, has no dependencies, and can be used on the server\n(nodejs) or in-browser.\n\n`owasp-password-strength-test` is not an OWASP project - it is merely based off\nof OWASP research.\n\n[![Build Status](https://travis-ci.org/nowsecure/owasp-password-strength-test.svg)](https://travis-ci.org/nowsecure/owasp-password-strength-test)\n\n\nInstalling\n----------\n### Server-side (nodejs) ###\nFrom the command line:\n\n```sh\nnpm install owasp-password-strength-test\n```\n\n### In-browser ###\nWithin your document:\n\n```html\n<script src='owasp-password-strength-test.js'></script>\n```\n\nFeatures\n--------\nThis module is built upon the following beliefs:\n\n1. [Passphrases are better than passwords][xkcd].\n\n2. Passwords should be subject to stricter complexity requirements than\n   passphrases.\n\nThus, the module:\n\n- **provides for \"required\" and \"optional\" tests**. In order to be considered\n  \"strong\", a password must pass _all_ required tests, as well as a\n  configurable number of optional tests. This makes it possible to always\n  enforce certain rules (like minimum password length), while giving users\n  flexibility to honor only some of a pool of lower-priority rules.\n\n- **encourages the use of passphrases over passwords**. Passphrases (by\n  default) are not subject to the same complexity requirements as a password.\n  (Whereby, by default, a \"passphrase\" can be defined as \"a password whose\n  length is greater than or equal to 20 characters.\")\n\n- **can be arbitrarily extended** as-needed with additional required and\n  optional tests.\n\n\nUsage\n-----\nAfter you've included it into your project, using the module is\nstraightforward:\n\n### Server-side ###\n```javascript\n// require the module\nvar owasp = require('owasp-password-strength-test');\n\n// invoke test() to test the strength of a password\nvar result = owasp.test('correct horse battery staple');\n```\n\n### In-browser ###\n```javascript\n// in the browser, including the script will make a\n// `window.owaspPasswordStrengthTest` object availble.\nvar result = owaspPasswordStrengthTest.test('correct horse battery staple');\n```\n\nThe returned value will take this shape when the password is valid:\n\n```javascript\n{\n  errors              : [],\n  failedTests         : [],\n  requiredTestErrors  : [],\n  optionalTestErrors  : [],\n  passedTests         : [ 0, 1, 2, 3, 4, 5, 6 ],\n  isPassphrase        : false,\n  strong              : true,\n  optionalTestsPassed : 4\n}\n\n```\n\n... and will take this shape when the password is invalid:\n\n```javascript\n{\n  errors: [\n      'The password must be at least 10 characters long.',\n      'The password must contain at least one uppercase letter.',\n      'The password must contain at least one number.',\n      'The password must contain at least one special character.'\n    ],\n    failedTests         : [ 0, 4, 5, 6 ],\n    passedTests         : [ 1, 2, 3 ],\n    requiredTestErrors  : [\n      'The password must be at least 10 characters long.',\n    ],\n    optionalTestErrors  : [\n      'The password must contain at least one uppercase letter.',\n      'The password must contain at least one number.',\n      'The password must contain at least one special character.'\n    ],\n    isPassphrase        : false,\n    strong              : false,\n    optionalTestsPassed : 1\n}\n```\n\nWhereby:\n\n- `errors` is an `array` of `string`s of error messages associated with the\n  failed tests.\n\n- `failedTests` enumerates which tests have failed, beginning from 0 with the\n  first required test\n\n- `passedTests` enumerates which tests have succeeded, beginning from 0 with\n  the first required test\n\n- `requiredTestErrors` is an array containing the error messages of required\n  tests that have failed.\n\n- `optionalTestErrors` is an array containing the error messages of optional\n  tests that have failed.\n\n- `isPassphrase` is a `boolean` indicating whether or not the password was\n  considered to be a passphrase.\n\n- `strong` is a `boolean` indicating whether or not the user's password\n  satisfied the strength requirements.\n\n- `optionalTestsPassed` is a `number` indicating how many of the optional tests\n  were passed. In order for the password to be considered \"strong\", it (by\n  default) must either be a passphrase, or must pass a number of optional tests\n  that is equal to or greater than `configs.minOptionalTestsToPass`.\n\n\nConfiguring\n-----------\nThe module may be configured as follows:\n\n\n```javascript\nvar owasp = require('owasp-password-strength-test');\n\n// Pass a hash of settings to the `config` method. The settings shown here are\n// the defaults.\nowasp.config({\n  allowPassphrases       : true,\n  maxLength              : 128,\n  minLength              : 10,\n  minPhraseLength        : 20,\n  minOptionalTestsToPass : 4,\n});\n```\n\nWhereby:\n\n- `allowPassphrases` is a `boolean` that toggles the \"passphrase\" mechanism on\n  and off. If set to `false`, the strength-checker will abandon the notion of\n  \"passphrases\", and will subject all passwords to the same complexity\n  requirements.\n\n- `maxLength` is a constraint on a password's maximum length.\n\n- `minLength` is a constraint on a password's minimum length.\n\n- `minPhraseLength` is the minimum length a password needs to achieve in order\n  to be considered a \"passphrase\" (and thus exempted from the optional\n  complexity tests by default).\n\n- `minOptionalTestsToPass` is the minimum number of optional tests that a\n  password must pass in order to be considered \"strong\". By default (per the\n  OWASP guidelines), four optional complexity tests are made, and a password\n  must pass at least three of them in order to be considered \"strong\". \n\n\nExtending\n---------\nIf you would like to filter passwords through additional tests beyond the\ndefault, you may simply push new tests onto the appropriate arrays within the\nmodule's `test` object:\n\n```javascript\nvar owasp = require('owasp-password-strength-test');\n\n// push \"required\" tests onto `tests.required` array, and push \"optional\" tests\n// onto the `tests.optional` array.\nowasp.tests.required.push(function(password) {\n  if (password === 'one two three four five') {\n    return \"That's the kind of thing an idiot would have on his luggage!\";\n  }\n});\n```\n\nTest functions must resemble the following:\n\n```javascript\n// accept the password as the single argument\nfunction(password) {\n\n  // the \"if\" conditional should evaluate to `true` if the password is bad\n  if (thePasswordIsBad) {\n\n    // On password failure, a string should be returned. It will be pushed\n    // onto an array of errors associated with the password.\n    return \"This is the failure message associated with the test\";\n  }\n\n  // if the password is OK, nothing should be returned\n}\n\n```\n\n\nTesting\n-------\nTo run the module's test suite, `cd` into its directory and run `npm test`. You\nmay first need to run `npm install` to install the required development\ndependencies. (These dependencies are **not** required in a production\nenvironment, and facilitate only unit testing.)\n\n\nContributing\n------------\nIf you would like to contribute code, please fork this repository, make your\nchanges, and then submit a pull-request.\n\n[guidelines]: https://www.owasp.org/index.php/Authentication_Cheat_Sheet#Implement_Proper_Password_Strength_Controls\n[xkcd]: http://xkcd.com/936/ \n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/nowsecure/owasp-password-strength-test/issues"
  },
  "_id": "owasp-password-strength-test@1.3.0",
  "dist": {
    "shasum": "4f629e42903e8f6d279b230d657ab61e58e44b12"
  },
  "_from": "owasp-password-strength-test@~1.3.0",
  "_resolved": "https://registry.npmjs.org/owasp-password-strength-test/-/owasp-password-strength-test-1.3.0.tgz"
}
